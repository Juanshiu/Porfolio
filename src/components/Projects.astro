---
interface Props {
    title: string;
    description: string;
    image: string;
    link: string;
    tagsToShow: string[];
}

const { title, description, image, link, tagsToShow } = Astro.props;

const Tags = {
    HTML: {
        name: "HTML",
        class: "bg-orange-500/50 border border-orange-700",
        icon: "html5.svg",
    },
    CSS: {
        name: "CSS",
        class: "bg-blue-500/50 border border-sky-600",
        icon: "css.svg",
    },
    JAVASCRIPT: {
        name: "JAVASCRIPT",
        class: "bg-yellow-500/50 border border-yellow-600",
        icon: "javascript.svg",
    }
};
---

<div class="w-full lg:w-1/2 h-min p-8 bg-white/5 rounded-xl ">
    <h3 class="text-2xl font-semibold text-[#E899DC]">{title}</h3>
    <p class="text-lg mb-4 text-pretty">{description}</p>
        <ul class="flex gap-x-2 flex-row mb-2">
            {Object.values(Tags).filter(tag => tagsToShow.includes(tag.name)).map((tag) => (
                <li>
                    <span class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}>
                        <img src={tag.icon} class=" size-4" alt="">{tag.name}
                    </span>
                </li>
            ))}
        </ul>
    
    <a href={link} target="_blank " class=" relative">
        <img src={image} alt={title} class=" absolute aspect-video blur-md scale-105 -z-10 transition-all">
        <img src={image} alt={title} class=" rounded shadow-2xl shadow-white/10 aspect-video hover:scale-105 hover:shadow-neutral-900  transition-all">
    </a>
</div>

<style>
	@keyframes show {
		from {
		opacity: 0;
		scale: 50%;
		}
		to {
		opacity: 1;
		scale: 100%;
		}
	}

	div {
		view-timeline-name: --Article;
		view-timeline-axis: block;
		animation-timeline: --Article;
		animation-name: show;

		animation-range: entry 25% cover 40%;
		animation-fill-mode: both;
	}
</style>